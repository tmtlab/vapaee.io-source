{"version":3,"sources":["ng://@vapaee/feedback/lib/feedback.service.ts","ng://@vapaee/feedback/lib/feedback.module.ts"],"names":["Feedback","this","keys","scopes","create","feed","prototype","updateScopes","i","addKey","key","push","startChrono","start","Date","marks","setMarck","label","millisec","getTime","sec","console","error","printChrono","lastMark","log","setLoading","value","loading","setError","err","msg","msgtype","clearError","setMessage","message","msgType","VapaeeFeedbackModule","NgModule","args","imports","declarations","providers","exports"],"mappings":"sSAgBAA,EAAA,WAII,SAAAA,IACIC,KAAKC,KAAO,GACZD,KAAKE,OAAS,UAGXH,EAAAI,OAAP,SAAcF,QAAA,IAAAA,IAAAA,EAAA,IACV,IAAIG,EAAO,IAAIL,EAEf,OADAK,EAAKH,KAAOA,EACLG,GAGHL,EAAAM,UAAAC,wBACJ,IAAK,IAAIC,KAAKP,KAAKC,KACfD,KAAKE,OAAOF,KAAKC,KAAKM,IAAMP,KAAKE,OAAOF,KAAKC,KAAKM,KAAO,IAIzDR,EAAAM,UAAAG,gBAAOC,GACXT,KAAKC,KAAKS,KAAKD,GACfT,KAAKM,gBAGTP,EAAAM,UAAAM,YAAA,SAAYF,GACJT,KAAKE,OAAOO,IACZT,KAAKE,OAAOO,GAAKG,MAAQ,IAAIC,KAC7Bb,KAAKE,OAAOO,GAAKK,MAAQ,KAEzBd,KAAKQ,OAAOC,GACZT,KAAKW,YAAYF,KAIzBV,EAAAM,UAAAU,SAAA,SAASN,EAAYO,GACjB,GAAIhB,KAAKE,OAAOO,GAAM,CAClB,IACIQ,GADmB,IAAIJ,MACAK,UAAYlB,KAAKE,OAAOO,GAAKG,MAAMM,UAC1DC,EAAMF,EAAW,IACrBjB,KAAKE,OAAOO,GAAKK,MAAMJ,KAAK,CAAEM,MAAKA,EAAEG,IAAGA,EAAEF,SAAQA,SAElDG,QAAQC,MAAM,yBAA0BZ,EAAKT,KAAKE,SAI1DH,EAAAM,UAAAiB,YAAA,SAAYb,EAAYc,GACpB,QADoB,IAAAA,IAAAA,GAAA,GAChBvB,KAAKE,OAAOO,GAGZ,IAAK,IAAIF,KAFTa,QAAQI,IAAI,yBAA0Bf,GACtCT,KAAKe,SAASN,EAAK,SACLT,KAAKE,OAAOO,GAAKK,MAC3BM,QAAQI,IAAI,KAAKxB,KAAKE,OAAOO,GAAKK,MAAMP,SAG5Ca,QAAQC,MAAM,yBAA0BZ,EAAKT,KAAKE,SAI1DH,EAAAM,UAAAoB,WAAA,SAAWhB,EAAYiB,GACf1B,KAAKE,OAAOO,GACZT,KAAKE,OAAOO,GAAKkB,QAAUD,GAE3B1B,KAAKQ,OAAOC,GACZT,KAAKyB,WAAWhB,EAAKiB,KAI7B3B,EAAAM,UAAAsB,QAAA,SAAQlB,GACJ,QAAIT,KAAKE,OAAOO,IACLT,KAAKE,OAAOO,GAAKkB,SAKhC5B,EAAAM,UAAAuB,SAAA,SAASnB,EAAYoB,QAAA,IAAAA,IAAAA,EAAA,IACb7B,KAAKE,OAAOO,IACZT,KAAKE,OAAOO,GAAKqB,IAAMD,EACvB7B,KAAKE,OAAOO,GAAKsB,QAAU,UAE3B/B,KAAKQ,OAAOC,GACZT,KAAK4B,SAASnB,EAAKoB,KAI3B9B,EAAAM,UAAA2B,WAAA,SAAWvB,GACPT,KAAK4B,SAASnB,EAAK,KAIvBV,EAAAM,UAAAgB,MAAA,SAAMZ,GACF,OAAIT,KAAKE,OAAOO,GACLT,KAAKE,OAAOO,GAAKqB,IAErB,IAGX/B,EAAAM,UAAA4B,WAAA,SAAWxB,EAAYqB,EAAaC,GAC5B/B,KAAKE,OAAOO,IACZT,KAAKE,OAAOO,GAAKqB,IAAMA,EACvB9B,KAAKE,OAAOO,GAAKsB,QAAUA,IAE3B/B,KAAKQ,OAAOC,GACZT,KAAKiC,WAAWxB,EAAKqB,EAAKC,KAIlChC,EAAAM,UAAA6B,QAAA,SAAQzB,GACJ,OAAOT,KAAKqB,MAAMZ,IAGtBV,EAAAM,UAAA8B,QAAA,SAAQ1B,GACJ,OAAIT,KAAKE,OAAOO,GACLT,KAAKE,OAAOO,GAAKsB,QAIrB,MArHf,GChBAK,EAAA,oDAGCC,EAAAA,SAAQC,KAAA,CAAC,CACNC,QAAS,GACTC,aAAc,GACdC,UAAU,CAAC1C,GACX2C,QAAS,SAPb","sourcesContent":["export interface Feed {\n    msg?:string;\n    msgtype?:string;\n    loading?:boolean;\n    start?:Date;\n    marks?:{\n        label:string,\n        sec:number,\n        millisec:number\n    }[]\n}\n\nexport interface FeedMap {\n    [key:string]:Feed\n};\n\nexport class Feedback {\n    public keys: string[];\n    private scopes: FeedMap;\n\n    constructor() {\n        this.keys = []\n        this.scopes = {};\n    }\n\n    static create(keys:string[] = []) {\n        var feed = new Feedback();\n        feed.keys = keys;\n        return feed;\n    }\n\n    private updateScopes() {\n        for (var i in this.keys) {\n            this.scopes[this.keys[i]] = this.scopes[this.keys[i]] || {}\n        }\n    }\n\n    private addKey(key:string) {\n        this.keys.push(key);\n        this.updateScopes();\n    }\n\n    startChrono(key:string) {\n        if (this.scopes[key]) {\n            this.scopes[key].start = new Date();\n            this.scopes[key].marks = [];\n        } else {\n            this.addKey(key);\n            this.startChrono(key);\n        }\n    }\n\n    setMarck(key:string, label:string) {\n        if (this.scopes[key]) {\n            var elapsedTime:Date = new Date();\n            var millisec = elapsedTime.getTime() - this.scopes[key].start.getTime();\n            var sec = millisec / 1000;\n            this.scopes[key].marks.push({ label, sec, millisec });\n        } else {\n            console.error(\"ERROR: key not present\", key, this.scopes);\n        }        \n    }\n\n    printChrono(key:string, lastMark:boolean = true) {\n        if (this.scopes[key]) {\n            console.log(\"Chronometer marks for \", key);\n            this.setMarck(key, \"total\");\n            for (var i in this.scopes[key].marks) {\n                console.log(\"- \",this.scopes[key].marks[i]);\n            }\n        } else {\n            console.error(\"ERROR: key not present\", key, this.scopes);\n        }        \n    }\n\n    setLoading(key:string, value:boolean) {\n        if (this.scopes[key]) {\n            this.scopes[key].loading = value;\n        } else {\n            this.addKey(key);\n            this.setLoading(key, value);\n        }\n    }\n\n    loading(key:string) {\n        if (this.scopes[key]) {\n            return this.scopes[key].loading;\n        }\n        return false;\n    }\n\n    setError(key:string, err: string = \"\") {\n        if (this.scopes[key]) {\n            this.scopes[key].msg = err;\n            this.scopes[key].msgtype = \"error\";\n        } else {\n            this.addKey(key);\n            this.setError(key, err);\n        }\n    }\n\n    clearError(key:string) {\n        this.setError(key, \"\");\n    }\n\n\n    error(key:string) {\n        if (this.scopes[key]) {\n            return this.scopes[key].msg;\n        }\n        return \"\";\n    }\n\n    setMessage(key:string, msg: string, msgtype: string) {\n        if (this.scopes[key]) {\n            this.scopes[key].msg = msg;\n            this.scopes[key].msgtype = msgtype;\n        } else {\n            this.addKey(key);\n            this.setMessage(key, msg, msgtype);\n        }\n    }    \n\n    message(key:string) {\n        return this.error(key);\n    }\n\n    msgType(key:string) {\n        if (this.scopes[key]) {\n            return this.scopes[key].msgtype;\n        } else {\n            // console.error(\"ERROR\", key, [this.scopes]);\n        }\n        return \"\";\n    }\n\n}\n\n/*\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FeedbackService {\n    \n    constructor(){}\n\n    create(keys:string[] = []) {\n        return new Feedback(keys);\n    }\n}\n*/","import { NgModule } from '@angular/core';\nimport { Feedback } from './feedback.service';\n\n@NgModule({\n    imports: [],\n    declarations: [],\n    providers:[Feedback],\n    exports: []\n})\nexport class VapaeeFeedbackModule { }\n"]}