/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import BigNumber from "bignumber.js";
import * as Long from 'long';
/**
 * @record
 */
export function SlugId() { }
/** @type {?|undefined} */
SlugId.prototype.low;
/** @type {?|undefined} */
SlugId.prototype.str;
/** @type {?|undefined} */
SlugId.prototype.top;
/**
 * @record
 */
export function Work() { }
/** @type {?} */
Work.prototype.items;
/** @type {?} */
Work.prototype.containers;
/**
 * @record
 */
export function Profile() { }
/** @type {?|undefined} */
Profile.prototype.id;
/** @type {?} */
Profile.prototype.slugid;
/** @type {?} */
Profile.prototype.account;
/** @type {?|undefined} */
Profile.prototype.containers;
/** @type {?|undefined} */
Profile.prototype.work;
export class ScatterUtils {
    constructor() {
        // (end) ---------------------------------------------------
        // OLD eosjs encodeName solution ------------------------------------------------------
        this.charmap = '.12345abcdefghijklmnopqrstuvwxyz';
        this.charidx = ch => {
            /** @type {?} */
            const idx = this.charmap.indexOf(ch);
            if (idx === -1)
                throw new TypeError(`Invalid character: '${ch}'`);
            return idx;
        };
        this.code_0 = "0".charCodeAt(0);
        this.code_1 = "1".charCodeAt(0);
        this.code_4 = "4".charCodeAt(0);
        this.code_9 = "9".charCodeAt(0);
        this.code_a = "a".charCodeAt(0);
        this.code_f = "f".charCodeAt(0);
        this.code_z = "z".charCodeAt(0);
    }
    /**
     * @param {?} nib
     * @return {?}
     */
    decodeNibble(nib) {
        /** @type {?} */
        var nibble = [0, 0, 0, 0];
        /** @type {?} */
        var value = 0;
        if (this.code_0 <= nib && nib <= this.code_9) {
            value = nib - this.code_0;
        }
        else if (this.code_a <= nib && nib <= this.code_f) {
            value = nib - this.code_a + 10;
        }
        nibble[0] = (value & 8) > 0 ? 1 : 0;
        nibble[1] = (value & 4) > 0 ? 1 : 0;
        nibble[2] = (value & 2) > 0 ? 1 : 0;
        nibble[3] = (value & 1) > 0 ? 1 : 0;
        return nibble;
    }
    /**
     * @param {?} index
     * @param {?} bits
     * @return {?}
     */
    encodeNibble(index, bits) {
        /** @type {?} */
        var value = 0;
        value += bits[index + 0] == 1 ? 8 : 0;
        value += bits[index + 1] == 1 ? 4 : 0;
        value += bits[index + 2] == 1 ? 2 : 0;
        value += bits[index + 3] == 1 ? 1 : 0;
        if (0 <= value && value <= 9) {
            return "" + value;
        }
        switch (value) {
            case 10: return "a";
            case 11: return "b";
            case 12: return "c";
            case 13: return "d";
            case 14: return "e";
            case 15: return "f";
        }
        return "?";
    }
    /**
     * @param {?} _num
     * @return {?}
     */
    decodeUint64(_num) {
        /** @type {?} */
        var bits = [];
        /** @type {?} */
        var num = _num.substr(2);
        for (var i = 0; i < num.length; i++) {
            bits = bits.concat(this.decodeNibble(num.charCodeAt(i)));
        }
        return bits;
    }
    /**
     * @param {?} bits
     * @return {?}
     */
    encodeUnit64(bits) {
        /** @type {?} */
        var slugid = { top: "0x", low: "0x" };
        /** @type {?} */
        var str = "top";
        for (var i = 0; i < bits.length; i += 4) {
            if (i >= 128)
                str = "low";
            slugid[str] += this.encodeNibble(i, bits);
        }
        return slugid;
    }
    /**
     * @param {?} bits
     * @return {?}
     */
    extractLength(bits) {
        if (bits.length != 256)
            console.error("ERROR: extractLength(bits) bits must be an array of 256 bits");
        return bits[250] * 32 + bits[251] * 16 + bits[252] * 8 + bits[253] * 4 + bits[254] * 2 + bits[255] * 1;
    }
    /**
     * @param {?} bits
     * @param {?} length
     * @return {?}
     */
    insertLength(bits, length) {
        if (bits.length != 256)
            console.error("ERROR: extractLength(bits) bits must be an array of 256 bits");
        bits[250] = (length & 32) ? 1 : 0;
        bits[251] = (length & 16) ? 1 : 0;
        bits[252] = (length & 8) ? 1 : 0;
        bits[253] = (length & 4) ? 1 : 0;
        bits[254] = (length & 2) ? 1 : 0;
        bits[255] = (length & 1) ? 1 : 0;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    valueToChar(v) {
        if (v == 0)
            return '.';
        if (v == 1)
            return '-';
        if (v < 6)
            return String.fromCharCode(v + this.code_0 - 1);
        if (v < 32)
            return String.fromCharCode(v + this.code_a - 6);
        console.assert(false, "ERROR: value out of range [0-31]", v);
        return '?';
    }
    /**
     * @param {?} c
     * @return {?}
     */
    charToValue(c) {
        console.assert(c.length == 1, "ERROR: c MUST be a character (string with length == 1). Got", typeof c, c);
        if (c == ".")
            return 0;
        if (c == "-")
            return 1;
        if (this.code_0 < c.charCodeAt(0) && c.charCodeAt(0) <= this.code_4)
            return c.charCodeAt(0) - this.code_1 + 2;
        if (this.code_a <= c.charCodeAt(0) && c.charCodeAt(0) <= this.code_z)
            return c.charCodeAt(0) - this.code_a + 6;
        console.assert(false, "ERROR: character '" + c + "' is not in allowed character set for slugid ");
        return -1;
    }
    /**
     * @param {?} c
     * @param {?} bits
     * @return {?}
     */
    extractChar(c, bits) {
        /** @type {?} */
        var encode = 5;
        /** @type {?} */
        var pot = Math.pow(2, encode - 1);
        /** @type {?} */
        var value = 0;
        /** @type {?} */
        var index = c * encode;
        for (var i = 0; i < encode; i++, pot = pot / 2) {
            value += bits[index + i] * pot;
        }
        /** @type {?} */
        var char = this.valueToChar(value);
        return char;
    }
    /**
     * @param {?} value
     * @param {?} j
     * @param {?} bits
     * @return {?}
     */
    insertChar(value, j, bits) {
        /** @type {?} */
        var encode = 5;
        /** @type {?} */
        var index = j * encode;
        bits[index + 0] = (value & 16) > 0 ? 1 : 0;
        bits[index + 1] = (value & 8) > 0 ? 1 : 0;
        bits[index + 2] = (value & 4) > 0 ? 1 : 0;
        bits[index + 3] = (value & 2) > 0 ? 1 : 0;
        bits[index + 4] = (value & 1) > 0 ? 1 : 0;
    }
    /**
     * @param {?} sluig
     * @return {?}
     */
    decodeSlug(sluig) {
        /** @type {?} */
        var bits = [];
        bits = this.decodeUint64(sluig.top).concat(this.decodeUint64(sluig.low));
        /** @type {?} */
        var length = bits[250] * 32 + bits[251] * 16 + bits[252] * 8 + bits[253] * 4 + bits[254] * 2 + bits[255] * 1;
        /** @type {?} */
        var str = "";
        for (var i = 0; i < length; i++) {
            str += this.extractChar(i, bits);
        }
        // console.log("str: ", str);
        sluig.str = str;
        return sluig;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    encodeSlug(name) {
        /** @type {?} */
        var bits = [];
        for (var i = 0; i < 256; i++) {
            bits.push(0);
        }
        for (var i = 0; i < name.length; i++) {
            /** @type {?} */
            var value = this.charToValue(name[i]);
            this.insertChar(value, i, bits);
        }
        this.insertLength(bits, name.length);
        /** @type {?} */
        var slug = this.encodeUnit64(bits);
        slug = this.decodeSlug(slug);
        console.assert(slug.str == name, "ERROR: slug.str: ", slug.str, [slug.str], [name]);
        return slug;
    }
    /**
     * @param {?} slug
     * @return {?}
     */
    slugTo128bits(slug) {
        /** @type {?} */
        var str = "0x";
        /** @type {?} */
        var topbits = this.decodeUint64(slug.top);
        /** @type {?} */
        var lowbits = this.decodeUint64(slug.low);
        /** @type {?} */
        var mixbits = [];
        for (var i = 0; i < topbits.length; i++) {
            mixbits.push(topbits[i] ^ lowbits[i] ? 1 : 0);
        }
        for (var i = 0; i < mixbits.length; i += 4) {
            str += this.encodeNibble(i, mixbits);
        }
        return str;
    }
    /**
     * @param {?} name
     * @param {?=} littleEndian
     * @return {?}
     */
    oldEosjsEncodeName(name, littleEndian = false) {
        if (typeof name !== 'string')
            throw new TypeError('name parameter is a required string');
        if (name.length > 12)
            throw new TypeError('A name can be up to 12 characters long');
        /** @type {?} */
        let bitstr = '';
        for (let i = 0; i <= 12; i++) {
            /** @type {?} */
            const c = i < name.length ? this.charidx(name[i]) : 0;
            /** @type {?} */
            const bitlen = i < 12 ? 5 : 4;
            /** @type {?} */
            let bits = Number(c).toString(2);
            if (bits.length > bitlen) {
                throw new TypeError('Invalid name ' + name);
            }
            bits = '0'.repeat(bitlen - bits.length) + bits;
            bitstr += bits;
        }
        /** @type {?} */
        const value = Long.fromString(bitstr, true, 2);
        /** @type {?} */
        let leHex = '';
        /** @type {?} */
        const bytes = littleEndian ? value.toBytesLE() : value.toBytesBE();
        for (const b of bytes) {
            /** @type {?} */
            const n = Number(b).toString(16);
            leHex += (n.length === 1 ? '0' : '') + n;
        }
        /** @type {?} */
        const ulName = Long.fromString(leHex, true, 16).toString();
        // console.log('encodeName', name, value.toString(), ulName.toString(), JSON.stringify(bitstr.split(/(.....)/).slice(1)))
        return ulName.toString();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    encodeName(name) {
        /** @type {?} */
        var number = this.oldEosjsEncodeName(name);
        return new BigNumber(number);
    }
}
if (false) {
    /** @type {?} */
    ScatterUtils.prototype.code_0;
    /** @type {?} */
    ScatterUtils.prototype.code_1;
    /** @type {?} */
    ScatterUtils.prototype.code_4;
    /** @type {?} */
    ScatterUtils.prototype.code_9;
    /** @type {?} */
    ScatterUtils.prototype.code_a;
    /** @type {?} */
    ScatterUtils.prototype.code_f;
    /** @type {?} */
    ScatterUtils.prototype.code_z;
    /** @type {?} */
    ScatterUtils.prototype.charmap;
    /** @type {?} */
    ScatterUtils.prototype.charidx;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmFwYWVlL3NjYXR0ZXIvIiwic291cmNlcyI6WyJsaWIvdXRpbHMuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUNyQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUI3QixNQUFNO0lBU0Y7Ozt1QkE0S1Usa0NBQWtDO3VCQUNsQyxFQUFFLENBQUMsRUFBRTs7WUFDWCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNwQyxFQUFFLENBQUEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1osTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUVuRCxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ2Q7UUFsTEcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ25DOzs7OztJQUdELFlBQVksQ0FBQyxHQUFVOztRQUNuQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDOztRQUN2QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDM0MsS0FBSyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzdCO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNsRCxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2xDO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztLQUNqQjs7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQVksRUFBRSxJQUFhOztRQUNwQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7U0FDckI7UUFDRCxNQUFNLENBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1gsS0FBSyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNwQixLQUFLLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ3BCLEtBQUssRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDcEIsS0FBSyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNwQixLQUFLLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ3BCLEtBQUssRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7U0FDdkI7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDO0tBQ2Q7Ozs7O0lBR0QsWUFBWSxDQUFDLElBQVk7O1FBQ3JCLElBQUksSUFBSSxHQUFZLEVBQUUsQ0FBQzs7UUFDdkIsSUFBSSxHQUFHLEdBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM5QixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztLQUNmOzs7OztJQUVELFlBQVksQ0FBQyxJQUFhOztRQUN0QixJQUFJLE1BQU0sR0FBVSxFQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsR0FBRyxFQUFDLElBQUksRUFBQyxDQUFDOztRQUN4QyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDaEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsR0FBRyxDQUFDO2dCQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7WUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztLQUNqQjs7Ozs7SUFFRCxhQUFhLENBQUMsSUFBYTtRQUN2QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztZQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztRQUNyRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDMUc7Ozs7OztJQUVELFlBQVksQ0FBQyxJQUFhLEVBQUUsTUFBYztRQUN0QyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztZQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztRQUNyRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMs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Q0FBQztRQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ2Y7Ozs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBWSxFQUFFLENBQVEsRUFBRSxJQUFhOztRQUM1QyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7O1FBQ2YsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFZOztRQUduQixJQUFJLElBQUksR0FBWSxFQUFFLENBQUM7UUFDdkIsSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENB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R0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQTtZQUM5QyxNQUFNLElBQUksSUFBSSxDQUFBO1NBQ2Y7O1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBOztRQUc5QyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUE7O1FBQ2QsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNsRSxHQUFHLENBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDOztZQUNyQixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ2hDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUN6Qzs7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUE7O1FBSTFELE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUE7S0FDM0I7Ozs7O0lBR0QsVUFBVSxDQUFDLElBQVc7O1FBTWxCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDaEM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaWdOdW1iZXIgZnJvbSBcImJpZ251bWJlci5qc1wiO1xuaW1wb3J0ICogYXMgTG9uZyBmcm9tICdsb25nJztcblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBpbnRlcmZhY2UgU2x1Z0lkIHtcbiAgICBsb3c/OiBzdHJpbmc7XG4gICAgc3RyPzogc3RyaW5nO1xuICAgIHRvcD86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgV29yayB7XG4gICAgaXRlbXM6IGFueVtdO1xuICAgIGNvbnRhaW5lcnM6IGFueVtdO1xufVxuZXhwb3J0IGludGVyZmFjZSBQcm9maWxlIHtcbiAgICBpZD86c3RyaW5nO1xuICAgIHNsdWdpZDogU2x1Z0lkO1xuICAgIGFjY291bnQ6IHN0cmluZztcbiAgICBjb250YWluZXJzPzogYW55W10sXG4gICAgd29yaz86IFdvcms7XG59XG5cbmV4cG9ydCBjbGFzcyBTY2F0dGVyVXRpbHMge1xuICAgIGNvZGVfMDpudW1iZXI7XG4gICAgY29kZV8xOm51bWJlcjtcbiAgICBjb2RlXzQ6bnVtYmVyO1xuICAgIGNvZGVfOTpudW1iZXI7XG4gICAgY29kZV9hOm51bWJlcjtcbiAgICBjb2RlX2Y6bnVtYmVyO1xuICAgIGNvZGVfejpudW1iZXI7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29kZV8wID0gXCIwXCIuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgdGhpcy5jb2RlXzEgPSBcIjFcIi5jaGFyQ29kZUF0KDApO1xuICAgICAgICB0aGlzLmNvZGVfNCA9IFwiNFwiLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIHRoaXMuY29kZV85ID0gXCI5XCIuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgdGhpcy5jb2RlX2EgPSBcImFcIi5jaGFyQ29kZUF0KDApO1xuICAgICAgICB0aGlzLmNvZGVfZiA9IFwiZlwiLmNoYXJDb2RlQXQoMCk7ICAgICAgICBcbiAgICAgICAgdGhpcy5jb2RlX3ogPSBcInpcIi5jaGFyQ29kZUF0KDApOyAgICAgICAgXG4gICAgfSAgICBcblxuICAgIC8vIHRoaXMgcGFydCBpcyBzdGlsbCBleHBlcmltZW50YWwgKGluaXQpIC0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZGVjb2RlTmliYmxlKG5pYjpudW1iZXIpIHtcbiAgICAgICAgdmFyIG5pYmJsZSA9IFswLDAsMCwwXTtcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcbiAgICAgICAgaWYgKHRoaXMuY29kZV8wIDw9IG5pYiAmJiBuaWIgPD0gdGhpcy5jb2RlXzkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbmliIC0gdGhpcy5jb2RlXzA7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb2RlX2EgPD0gbmliICYmIG5pYiA8PSB0aGlzLmNvZGVfZikge1xuICAgICAgICAgICAgdmFsdWUgPSBuaWIgLSB0aGlzLmNvZGVfYSArIDEwO1xuICAgICAgICB9XG4gICAgICAgIG5pYmJsZVswXSA9ICh2YWx1ZSAmIDgpID4gMCA/IDEgOiAwO1xuICAgICAgICBuaWJibGVbMV0gPSAodmFsdWUgJiA0KSA+IDAgPyAxIDogMDtcbiAgICAgICAgbmliYmxlWzJdID0gKHZhbHVlICYgMikgPiAwID8gMSA6IDA7XG4gICAgICAgIG5pYmJsZVszXSA9ICh2YWx1ZSAmIDEpID4gMCA/IDEgOiAwO1xuICAgICAgICByZXR1cm4gbmliYmxlO1xuICAgIH1cblxuICAgIGVuY29kZU5pYmJsZShpbmRleDpudW1iZXIsIGJpdHM6bnVtYmVyW10pIHtcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcbiAgICAgICAgdmFsdWUgKz0gYml0c1tpbmRleCArIDBdID09IDEgPyA4IDogMDtcbiAgICAgICAgdmFsdWUgKz0gYml0c1tpbmRleCArIDFdID09IDEgPyA0IDogMDtcbiAgICAgICAgdmFsdWUgKz0gYml0c1tpbmRleCArIDJdID09IDEgPyAyIDogMDtcbiAgICAgICAgdmFsdWUgKz0gYml0c1tpbmRleCArIDNdID09IDEgPyAxIDogMDtcbiAgICAgICAgaWYgKDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gOSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBcImFcIjtcbiAgICAgICAgICAgIGNhc2UgMTE6IHJldHVybiBcImJcIjtcbiAgICAgICAgICAgIGNhc2UgMTI6IHJldHVybiBcImNcIjtcbiAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiBcImRcIjtcbiAgICAgICAgICAgIGNhc2UgMTQ6IHJldHVybiBcImVcIjtcbiAgICAgICAgICAgIGNhc2UgMTU6IHJldHVybiBcImZcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCI/XCI7XG4gICAgfVxuXG4gICAgLy8gX251bSBpcyBhbiBoZXhhXG4gICAgZGVjb2RlVWludDY0KF9udW06IHN0cmluZykge1xuICAgICAgICB2YXIgYml0czpudW1iZXJbXSA9IFtdO1xuICAgICAgICB2YXIgbnVtOnN0cmluZyA9IF9udW0uc3Vic3RyKDIpO1xuICAgICAgICBmb3IgKHZhciBpPTA7IGk8bnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBiaXRzID0gYml0cy5jb25jYXQodGhpcy5kZWNvZGVOaWJibGUobnVtLmNoYXJDb2RlQXQoaSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYml0cztcbiAgICB9XG5cbiAgICBlbmNvZGVVbml0NjQoYml0czpudW1iZXJbXSkge1xuICAgICAgICB2YXIgc2x1Z2lkOlNsdWdJZCA9IHt0b3A6XCIweFwiLGxvdzpcIjB4XCJ9O1xuICAgICAgICB2YXIgc3RyID0gXCJ0b3BcIjtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGJpdHMubGVuZ3RoOyBpKz00KSB7XG4gICAgICAgICAgICBpZiAoaT49MTI4KSBzdHIgPSBcImxvd1wiO1xuICAgICAgICAgICAgc2x1Z2lkW3N0cl0gKz0gdGhpcy5lbmNvZGVOaWJibGUoaSwgYml0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNsdWdpZDtcbiAgICB9XG5cbiAgICBleHRyYWN0TGVuZ3RoKGJpdHM6bnVtYmVyW10pIHtcbiAgICAgICAgaWYoYml0cy5sZW5ndGggIT0gMjU2KSBjb25zb2xlLmVycm9yKFwiRVJST1I6IGV4dHJhY3RMZW5ndGgoYml0cykgYml0cyBtdXN0IGJlIGFuIGFycmF5IG9mIDI1NiBiaXRzXCIpO1xuICAgICAgICByZXR1cm4gYml0c1syNTBdICogMzIgKyBiaXRzWzI1MV0gKiAxNiArIGJpdHNbMjUyXSAqIDggKyBiaXRzWzI1M10gKiA0ICsgYml0c1syNTRdICogMiArIGJpdHNbMjU1XSAqIDE7XG4gICAgfVxuXG4gICAgaW5zZXJ0TGVuZ3RoKGJpdHM6bnVtYmVyW10sIGxlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIGlmKGJpdHMubGVuZ3RoICE9IDI1NikgY29uc29sZS5lcnJvcihcIkVSUk9SOiBleHRyYWN0TGVuZ3RoKGJpdHMpIGJpdHMgbXVzdCBiZSBhbiBhcnJheSBvZiAyNTYgYml0c1wiKTtcbiAgICAgICAgYml0c1syNTBdID0gKGxlbmd0aCAmIDMyKSA/IDEgOiAwO1xuICAgICAgICBiaXRzWzI1MV0gPSAobGVuZ3RoICYgMTYpID8gMSA6IDA7XG4gICAgICAgIGJpdHNbMjUyXSA9IChsZW5ndGggJiAgOCkgPyAxIDogMDtcbiAgICAgICAgYml0c1syNTNdID0gKGxlbmd0aCAmICA0KSA/IDEgOiAwO1xuICAgICAgICBiaXRzWzI1NF0gPSAobGVuZ3RoICYgIDIpID8gMSA6IDA7XG4gICAgICAgIGJpdHNbMjU1XSA9IChsZW5ndGggJiAgMSkgPyAxIDogMDtcbiAgICB9XG5cbiAgICB2YWx1ZVRvQ2hhcih2Om51bWJlcikge1xuICAgICAgICBpZiAodiA9PSAwKSByZXR1cm4gJy4nO1xuICAgICAgICBpZiAodiA9PSAxKSByZXR1cm4gJy0nO1xuICAgICAgICBpZiAodiA8IDYpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHYgKyB0aGlzLmNvZGVfMCAtIDEpO1xuICAgICAgICBpZiAodiA8IDMyKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh2ICsgdGhpcy5jb2RlX2EgLSA2KTtcbiAgICAgICAgY29uc29sZS5hc3NlcnQoZmFsc2UsIFwiRVJST1I6IHZhbHVlIG91dCBvZiByYW5nZSBbMC0zMV1cIiwgdik7XG4gICAgICAgIHJldHVybiAnPyc7ICAgICAgICAgICAgICAgICAgIFxuICAgIH1cblxuICAgIGNoYXJUb1ZhbHVlKGM6c3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KGMubGVuZ3RoID09IDEsIFwiRVJST1I6IGMgTVVTVCBiZSBhIGNoYXJhY3RlciAoc3RyaW5nIHdpdGggbGVuZ3RoID09IDEpLiBHb3RcIiwgdHlwZW9mIGMsIGMpO1xuICAgICAgICBpZiAoYyA9PSBcIi5cIikgcmV0dXJuIDA7XG4gICAgICAgIGlmIChjID09IFwiLVwiKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKHRoaXMuY29kZV8wIDwgYy5jaGFyQ29kZUF0KDApICYmIGMuY2hhckNvZGVBdCgwKSA8PSB0aGlzLmNvZGVfNCkgcmV0dXJuIGMuY2hhckNvZGVBdCgwKSAtIHRoaXMuY29kZV8xICsgMjtcbiAgICAgICAgaWYgKHRoaXMuY29kZV9hIDw9IGMuY2hhckNvZGVBdCgwKSAmJiBjLmNoYXJDb2RlQXQoMCkgPD0gdGhpcy5jb2RlX3opIHJldHVybiBjLmNoYXJDb2RlQXQoMCkgLSB0aGlzLmNvZGVfYSArIDY7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KGZhbHNlLCBcIkVSUk9SOiBjaGFyYWN0ZXIgJ1wiICsgYyArIFwiJyBpcyBub3QgaW4gYWxsb3dlZCBjaGFyYWN0ZXIgc2V0IGZvciBzbHVnaWQgXCIpO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgZXh0cmFjdENoYXIoYzpudW1iZXIsIGJpdHM6bnVtYmVyW10pIHtcbiAgICAgICAgdmFyIGVuY29kZSA9IDU7XG4gICAgICAgIHZhciBwb3QgPSBNYXRoLnBvdygyLCBlbmNvZGUtMSk7IC8vIDE2XG4gICAgICAgIHZhciB2YWx1ZSA9IDA7XG4gICAgICAgIHZhciBpbmRleCA9IGMgKiBlbmNvZGU7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxlbmNvZGU7IGkrKywgcG90ID0gcG90LzIpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGJpdHNbaW5kZXggKyBpXSAqIHBvdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhciA9IHRoaXMudmFsdWVUb0NoYXIodmFsdWUpO1xuICAgICAgICByZXR1cm4gY2hhcjtcbiAgICB9XG5cbiAgICBpbnNlcnRDaGFyKHZhbHVlOm51bWJlciwgajpudW1iZXIsIGJpdHM6bnVtYmVyW10pIHtcbiAgICAgICAgdmFyIGVuY29kZSA9IDU7XG4gICAgICAgIHZhciBpbmRleCA9IGogKiBlbmNvZGU7XG4gICAgICAgIGJpdHNbaW5kZXggKyAwXSA9ICh2YWx1ZSAmIDE2KSA+IDAgPyAxIDogMDtcbiAgICAgICAgYml0c1tpbmRleCArIDFdID0gKHZhbHVlICYgIDgpID4gMCA/IDEgOiAwO1xuICAgICAgICBiaXRzW2luZGV4ICsgMl0gPSAodmFsdWUgJiAgNCkgPiAwID8gMSA6IDA7XG4gICAgICAgIGJpdHNbaW5kZXggKyAzXSA9ICh2YWx1ZSAmICAyKSA+IDAgPyAxIDogMDsgICAgICAgICAgICBcbiAgICAgICAgYml0c1tpbmRleCArIDRdID0gKHZhbHVlICYgIDEpID4gMCA/IDEgOiAwO1xuICAgIH1cblxuICAgIGRlY29kZVNsdWcoc2x1aWc6U2x1Z0lkKSB7XG4gICAgICAgIC8vIGRlY29kZVNsdWcoKSAweDQxYWU5YzA0ZDM0ODczNDgyYTc4MDAwMDAwMDAwMDAwIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTBcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJkZWNvZGVTbHVnKClcIiwgbmljay50b3AsIG5pY2subG93KTtcbiAgICAgICAgdmFyIGJpdHM6bnVtYmVyW10gPSBbXTtcbiAgICAgICAgYml0cyA9IHRoaXMuZGVjb2RlVWludDY0KHNsdWlnLnRvcCkuY29uY2F0KHRoaXMuZGVjb2RlVWludDY0KHNsdWlnLmxvdykpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gYml0c1syNTBdICogMzIgKyBiaXRzWzI1MV0gKiAxNiArIGJpdHNbMjUyXSAqIDggKyBiaXRzWzI1M10gKiA0ICsgYml0c1syNTRdICogMiArIGJpdHNbMjU1XSAqIDE7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwibGVuZ3RoOiBcIiwgbGVuZ3RoKTtcbiAgICAgICAgdmFyIHN0cjpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBmb3IgKHZhciBpPTA7IGk8bGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN0ciArPSB0aGlzLmV4dHJhY3RDaGFyKGksIGJpdHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic3RyOiBcIiwgc3RyKTtcbiAgICAgICAgc2x1aWcuc3RyID0gc3RyO1xuICAgICAgICByZXR1cm4gc2x1aWc7XG4gICAgfVxuXG4gICAgZW5jb2RlU2x1ZyhuYW1lOnN0cmluZyk6U2x1Z0lkIHtcbiAgICAgICAgdmFyIGJpdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPDI1NjsgaSsrKSB7XG4gICAgICAgICAgICBiaXRzLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPG5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuY2hhclRvVmFsdWUobmFtZVtpXSk7XG4gICAgICAgICAgICB0aGlzLmluc2VydENoYXIodmFsdWUsIGksIGJpdHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5zZXJ0TGVuZ3RoKGJpdHMsIG5hbWUubGVuZ3RoKTtcbiAgICAgICAgdmFyIHNsdWcgPSB0aGlzLmVuY29kZVVuaXQ2NChiaXRzKTtcblxuICAgICAgICBzbHVnID0gdGhpcy5kZWNvZGVTbHVnKHNsdWcpO1xuICAgICAgICBjb25zb2xlLmFzc2VydChzbHVnLnN0ciA9PSBuYW1lLCBcIkVSUk9SOiBzbHVnLnN0cjogXCIsIHNsdWcuc3RyLCBbc2x1Zy5zdHJdLCBbbmFtZV0pO1xuXG4gICAgICAgIHJldHVybiBzbHVnO1xuICAgIH1cblxuICAgIHNsdWdUbzEyOGJpdHMoc2x1ZzpTbHVnSWQpOnN0cmluZyB7XG4gICAgICAgIHZhciBzdHIgPSBcIjB4XCI7XG4gICAgICAgIHZhciB0b3BiaXRzID0gdGhpcy5kZWNvZGVVaW50NjQoc2x1Zy50b3ApO1xuICAgICAgICB2YXIgbG93Yml0cyA9IHRoaXMuZGVjb2RlVWludDY0KHNsdWcubG93KTtcbiAgICAgICAgdmFyIG1peGJpdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHRvcGJpdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG1peGJpdHMucHVzaCh0b3BiaXRzW2ldIF4gbG93Yml0c1tpXSA/IDEgOiAwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpPTA7IGk8bWl4Yml0cy5sZW5ndGg7IGkrPTQpIHtcbiAgICAgICAgICAgIHN0ciArPSB0aGlzLmVuY29kZU5pYmJsZShpLCBtaXhiaXRzKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIC8vIChlbmQpIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gT0xEIGVvc2pzIGVuY29kZU5hbWUgc29sdXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgY2hhcm1hcCA9ICcuMTIzNDVhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eic7XG4gICAgY2hhcmlkeCA9IGNoID0+IHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5jaGFybWFwLmluZGV4T2YoY2gpXG4gICAgICAgIGlmKGlkeCA9PT0gLTEpXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBjaGFyYWN0ZXI6ICcke2NofSdgKVxuICAgICAgXG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuICAgIG9sZEVvc2pzRW5jb2RlTmFtZShuYW1lLCBsaXR0bGVFbmRpYW4gPSBmYWxzZSkge1xuICAgICAgICBpZih0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbmFtZSBwYXJhbWV0ZXIgaXMgYSByZXF1aXJlZCBzdHJpbmcnKVxuICAgICAgXG4gICAgICAgIGlmKG5hbWUubGVuZ3RoID4gMTIpXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBuYW1lIGNhbiBiZSB1cCB0byAxMiBjaGFyYWN0ZXJzIGxvbmcnKVxuICAgICAgXG4gICAgICAgIGxldCBiaXRzdHIgPSAnJ1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDw9IDEyOyBpKyspIHsgLy8gcHJvY2VzcyBhbGwgNjQgYml0cyAoZXZlbiBpZiBuYW1lIGlzIHNob3J0KVxuICAgICAgICAgIGNvbnN0IGMgPSBpIDwgbmFtZS5sZW5ndGggPyB0aGlzLmNoYXJpZHgobmFtZVtpXSkgOiAwXG4gICAgICAgICAgY29uc3QgYml0bGVuID0gaSA8IDEyID8gNSA6IDRcbiAgICAgICAgICBsZXQgYml0cyA9IE51bWJlcihjKS50b1N0cmluZygyKVxuICAgICAgICAgIGlmKGJpdHMubGVuZ3RoID4gYml0bGVuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5hbWUgJyArIG5hbWUpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdHMgPSAnMCcucmVwZWF0KGJpdGxlbiAtIGJpdHMubGVuZ3RoKSArIGJpdHNcbiAgICAgICAgICBiaXRzdHIgKz0gYml0c1xuICAgICAgICB9XG4gICAgICBcbiAgICAgICAgY29uc3QgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcoYml0c3RyLCB0cnVlLCAyKVxuICAgICAgXG4gICAgICAgIC8vIGNvbnZlcnQgdG8gTElUVExFX0VORElBTlxuICAgICAgICBsZXQgbGVIZXggPSAnJ1xuICAgICAgICBjb25zdCBieXRlcyA9IGxpdHRsZUVuZGlhbiA/IHZhbHVlLnRvQnl0ZXNMRSgpIDogdmFsdWUudG9CeXRlc0JFKClcbiAgICAgICAgZm9yKGNvbnN0IGIgb2YgYnl0ZXMpIHtcbiAgICAgICAgICBjb25zdCBuID0gTnVtYmVyKGIpLnRvU3RyaW5nKDE2KVxuICAgICAgICAgIGxlSGV4ICs9IChuLmxlbmd0aCA9PT0gMSA/ICcwJyA6ICcnKSArIG5cbiAgICAgICAgfVxuICAgICAgXG4gICAgICAgIGNvbnN0IHVsTmFtZSA9IExvbmcuZnJvbVN0cmluZyhsZUhleCwgdHJ1ZSwgMTYpLnRvU3RyaW5nKClcbiAgICAgIFxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZW5jb2RlTmFtZScsIG5hbWUsIHZhbHVlLnRvU3RyaW5nKCksIHVsTmFtZS50b1N0cmluZygpLCBKU09OLnN0cmluZ2lmeShiaXRzdHIuc3BsaXQoLyguLi4uLikvKS5zbGljZSgxKSkpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdWxOYW1lLnRvU3RyaW5nKClcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgZW5jb2RlTmFtZShuYW1lOnN0cmluZyk6QmlnTnVtYmVyIHtcbiAgICAgICAgLypcbiAgICAgICAgY29uc3QgYnVmZmVyOiBTZXJpYWxpemUuU2VyaWFsQnVmZmVyID0gbmV3IFNlcmlhbGl6ZS5TZXJpYWxCdWZmZXIoKTtcbiAgICAgICAgYnVmZmVyLnB1c2hOYW1lKG5hbWUpO1xuICAgICAgICB2YXIgbnVtYmVyID0gYnVmZmVyLmdldFVpbnQ2NEFzTnVtYmVyKCk7XG4gICAgICAgICovXG4gICAgICAgIHZhciBudW1iZXIgPSB0aGlzLm9sZEVvc2pzRW5jb2RlTmFtZShuYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIobnVtYmVyKTtcbiAgICB9XG5cbn0iXX0=