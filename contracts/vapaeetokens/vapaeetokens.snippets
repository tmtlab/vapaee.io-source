            // copy from old structure to newone
            tokens2 tokens_table(get_self(), get_self().value);
            tokens tokens2_table(get_self(), get_self().value);
            for (auto ptr_tk = tokens_table.begin(); ptr_tk != tokens_table.end(); ptr_tk = tokens_table.begin()) {
                // new tokens
                tokens2_table.emplace(get_self(), [&]( auto& a ) {
                    a.symbol = ptr_tk->symbol;
                    a.group = 0;
                    a.precision = ptr_tk->precision;
                    a.contract = ptr_tk->contract;
                    a.admin = ptr_tk->admin;
                    a.title = ptr_tk->title;
                    a.website = ptr_tk->website;
                    a.brief = ptr_tk->brief;
                    a.banner = ptr_tk->banner;
                    a.icon = ptr_tk->icon;
                    a.iconlg = ptr_tk->iconlg;
                    a.date = ptr_tk->date;
                    a.tradeable = ptr_tk->tradeable;
                    a.currency = ptr_tk->currency;
                });
                // borro el viejo
                tokens_table.erase(*ptr_tk);
                if (++count>num) return;
            }


            // itero sobre los usuarios para cambiarlos sus
            depusers users_table(get_self(), get_self().value);
            for (auto uptr = users_table.begin(); uptr != users_table.end(); uptr++) {
                name owner = uptr->account;
                // userorders ------------
                userorders2 userorders_table(get_self(), owner.value);
                userorders userorders2_table(get_self(), owner.value);
                for (auto ptr_usrords = userorders_table.begin(); ptr_usrords != userorders_table.end(); ptr_usrords = userorders_table.begin()) {
                    userorders2_table.emplace(get_self(), [&]( auto& a ) {
                        a.market = ptr_usrords->market;
                        a.table = ptr_usrords->table;
                        std::vector<uint64_t> newlist;
                        std::copy_if (ptr_usrords->ids.begin(), ptr_usrords->ids.end(), std::back_inserter(newlist), [&](uint64_t i){return true;} );
                        a.ids = newlist;
                    });
                    userorders_table.erase(*ptr_usrords);
                    if (++count>num) return;
                }
            }

            // copy from old structure to newone
            ordersum2 o_summary(get_self(), get_self().value);
            ordersummary o_sum(get_self(), get_self().value);
            for (auto ptr = o_summary.begin(); ptr != o_summary.end(); ptr = o_summary.begin()) {
                market = aux_get_market_id(ptr->sell, ptr->pay);
                market_inv = aux_get_market_id(ptr->pay, ptr->sell);
                scope = aux_get_scope_for_tokens(ptr->sell, ptr->pay);
                scope_inv = aux_get_scope_for_tokens(ptr->pay, ptr->sell);
                
                // sellorders ------------
                sellorder2 sord_table(get_self(), market);
                sellorders sord2_table(get_self(), market);
                for (auto ptr_sord = sord_table.begin(); ptr_sord != sord_table.end(); ptr_sord = sord_table.begin()) {
                    sord2_table.emplace(get_self(), [&]( auto& a ) {
                        a.id = ptr_sord->id;
                        a.owner = ptr_sord->owner;
                        a.price = ptr_sord->price;
                        a.inverse = ptr_sord->inverse;
                        a.total = ptr_sord->total;
                        a.selling = ptr_sord->selling;
                        a.ui = ptr_sord->ui;
                    });
                    sord_table.erase(*ptr_sord);
                    if (++count>num) return; 
                }
                // sellorders inverse ------------
                sellorder2 sord_inv_table(get_self(), market_inv);
                sellorders sord2_inv_table(get_self(), market_inv);
                for (auto ptr_inv_sord = sord_inv_table.begin(); ptr_inv_sord != sord_inv_table.end(); ptr_inv_sord = sord_inv_table.begin()) {
                    sord2_inv_table.emplace(get_self(), [&]( auto& a ) {
                        a.id = ptr_inv_sord->id;
                        a.owner = ptr_inv_sord->owner;
                        a.price = ptr_inv_sord->price;
                        a.inverse = ptr_inv_sord->inverse;
                        a.total = ptr_inv_sord->total;
                        a.selling = ptr_inv_sord->selling;
                        a.ui = ptr_inv_sord->ui;
                    });
                    sord_inv_table.erase(*ptr_inv_sord);
                    if (++count>num) return; 
                }
                
                // new ordersummary
                o_sum.emplace(get_self(), [&]( auto& a ) {
                    a.market = ptr->market;
                    a.demand.orders = ptr->demand.orders;
                    a.supply.orders = ptr->supply.orders;
                    a.demand.total = ptr->demand.total;
                    a.supply.total = ptr->supply.total;
                    a.supply.ascurrency = ptr->supply.ascurrency;
                    a.demand.ascurrency = ptr->demand.ascurrency;
                    a.sell = ptr->sell;
                    a.pay = ptr->pay;
                    a.deals = ptr->deals;
                    a.blocks = ptr->blocks;
                });
                // borro el viejo
                o_summary.erase(*ptr);
                if (++count>num) return;
            }
            
            check(false, "FIN");





            // tokengroup table(get_self(), get_self().value);
            // table.emplace(get_self(), [&]( auto& a ) {
            //     a.id = 0;
            //     a.admin = name("vapaeetokens");
            //     a.title = "Telos DEX";
            //     a.website = "https://vapaee.io/exchange/tokens";
            //     a.brief = "Telos DEX Showroom";
            //     a.banner = "";
            //     a.bigbanner = "";
            //     a.currency = symbol_code("TLOS");
            // });


            
            /// // copy from old structure to newone
            /// tokens tokens_table(get_self(), get_self().value);
            /// tokens2 tokens2_table(get_self(), get_self().value);
            /// for (auto ptr_tk = tokens_table.begin(); ptr_tk != tokens_table.end(); ptr_tk = tokens_table.begin()) {
            ///     // new tokens
            ///     tokens2_table.emplace(get_self(), [&]( auto& a ) {
            ///         a.symbol = ptr_tk->symbol;
            ///         a.group = 0;
            ///         a.precision = ptr_tk->precision;
            ///         a.contract = ptr_tk->contract;
            ///         a.admin = ptr_tk->owner;
            ///         a.title = ptr_tk->title;
            ///         a.website = ptr_tk->website;
            ///         a.brief = ptr_tk->brief;
            ///         a.banner = ptr_tk->banner;
            ///         a.icon = ptr_tk->icon;
            ///         a.iconlg = ptr_tk->iconlg;
            ///         a.date = ptr_tk->date;
            ///         a.tradeable = ptr_tk->tradeable;
            ///         a.currency = ptr_tk->currency;
            ///     });
            ///     // borro el viejo
            ///     tokens_table.erase(*ptr_tk);
            ///     if (++count>num) return;
            /// }

            


            /// // itero sobre los usuarios para cambiarlos sus 
            /// depusers users_table(get_self(), get_self().value);           
            /// for (auto uptr = users_table.begin(); uptr != users_table.end(); uptr++) {
            ///     name owner = uptr->account;
            ///     // userorders ------------
            ///     userorders userorders_table(get_self(), owner.value);
            ///     userorders2 userorders2_table(get_self(), owner.value);
            ///     for (auto ptr_usrords = userorders_table.begin(); ptr_usrords != userorders_table.end(); ptr_usrords = userorders_table.begin()) {
            ///         uint64_t market = aux_get_makert_from_table(ptr_usrords->table);
            ///         userorders2_table.emplace(get_self(), [&]( auto& a ) {
            ///             a.market = market;
            ///             a.table = ptr_usrords->table.to_string();
            ///             std::vector<uint64_t> newlist;
            ///             std::copy_if (ptr_usrords->ids.begin(), ptr_usrords->ids.end(), std::back_inserter(newlist), [&](uint64_t i){return true;} );
            ///             a.ids = newlist;
            ///         });
            ///         userorders_table.erase(*ptr_usrords);
            ///         if (++count>num) return;
            ///     }
            /// }
           

            // // copy from old structure to newone
            // ordersummary o_summary(get_self(), get_self().value);
            // ordersum2 o_sum(get_self(), get_self().value);
            // for (auto ptr = o_summary.begin(); ptr != o_summary.end(); ptr = o_summary.begin()) {
            //     market = aux_get_market_id(ptr->sell, ptr->pay);
            //     market_inv = aux_get_market_id(ptr->pay, ptr->sell);
            //     scope = aux_get_scope_for_tokens(ptr->sell, ptr->pay);
            //     scope_inv = aux_get_scope_for_tokens(ptr->pay, ptr->sell);
            //     // history ------------
            //     history h_table(get_self(), ptr->table.value);
            //     history h2_table(get_self(), market);
            //     for (auto ptr_h = h_table.begin(); ptr_h != h_table.end(); ptr_h = h_table.begin()) {
            //         h2_table.emplace(get_self(), [&]( auto& a ) {
            //             a.id = ptr_h->id;
            //             a.date = ptr_h->date;
            //             a.buyer = ptr_h->buyer;
            //             a.seller = ptr_h->seller;
            //             a.price = ptr_h->price;
            //             a.inverse = ptr_h->inverse;
            //             a.amount = ptr_h->amount;
            //             a.payment = ptr_h->payment;
            //             a.buyfee = ptr_h->buyfee;
            //             a.sellfee = ptr_h->sellfee;
            //             a.isbuy = ptr_h->isbuy;
            //         });
            //         h_table.erase(*ptr_h);
            //         if (++count>num) return;
            //     }
            //     // tablesummary ------------
            //     tablesummary ts_table(get_self(), ptr->table.value);
            //     tablesummary ts2_table(get_self(), market);
            //     for (auto ptr_ts = ts_table.begin(); ptr_ts != ts_table.end(); ptr_ts = ts_table.begin()) {
            //         ts2_table.emplace(get_self(), [&]( auto& a ) {
            //             a.label = ptr_ts->label;
            //             a.price = ptr_ts->price;
            //             a.inverse = ptr_ts->inverse;
            //             a.entrance = ptr_ts->entrance;
            //             a.max = ptr_ts->max;
            //             a.min = ptr_ts->min;
            //             a.volume = ptr_ts->volume;
            //             a.amount = ptr_ts->amount;
            //             a.hour = ptr_ts->hour;
            //             a.date = ptr_ts->date;           
            //         });
            //         ts_table.erase(*ptr_ts);
            //         if (++count>num) return; 
            //     }
            //     // sellorders ------------
            //     sellorders sord_table(get_self(), ptr->table.value);
            //     sellorder2 sord2_table(get_self(), market);
            //     for (auto ptr_sord = sord_table.begin(); ptr_sord != sord_table.end(); ptr_sord = sord_table.begin()) {
            //         sord2_table.emplace(get_self(), [&]( auto& a ) {
            //             a.id = ptr_sord->id;
            //             a.owner = ptr_sord->owner;
            //             a.price = ptr_sord->price;
            //             a.inverse = ptr_sord->inverse;
            //             a.total = ptr_sord->total;
            //             a.selling = ptr_sord->selling;
            //             a.ui = 0;
            //         });
            //         sord_table.erase(*ptr_sord);
            //         if (++count>num) return; 
            //     }
            //     // sellorders inverse ------------
            //     sellorders sord_inv_table(get_self(), scope_inv.value);
            //     sellorder2 sord2_inv_table(get_self(), market_inv);
            //     for (auto ptr_inv_sord = sord_inv_table.begin(); ptr_inv_sord != sord_inv_table.end(); ptr_inv_sord = sord_inv_table.begin()) {
            //         sord2_inv_table.emplace(get_self(), [&]( auto& a ) {
            //             a.id = ptr_inv_sord->id;
            //             a.owner = ptr_inv_sord->owner;
            //             a.price = ptr_inv_sord->price;
            //             a.inverse = ptr_inv_sord->inverse;
            //             a.total = ptr_inv_sord->total;
            //             a.selling = ptr_inv_sord->selling;
            //             a.ui = 0;
            //         });
            //         sord_inv_table.erase(*ptr_inv_sord);
            //         if (++count>num) return; 
            //     }
            //     // blockhistory ------------
            //     blockhistory blkhist_table(get_self(), ptr->table.value);
            //     blockhistory blkhist2_table(get_self(), market);
            //     for (auto ptr_blkhist = blkhist_table.begin(); ptr_blkhist != blkhist_table.end(); ptr_blkhist = blkhist_table.begin()) {
            //         blkhist2_table.emplace(get_self(), [&]( auto& a ) {
            //             a.id = ptr_blkhist->id;
            //             a.hour = ptr_blkhist->hour;
            //             a.price = ptr_blkhist->price;
            //             a.inverse = ptr_blkhist->inverse;
            //             a.entrance = ptr_blkhist->entrance;
            //             a.max = ptr_blkhist->max;
            //             a.min = ptr_blkhist->min;
            //             a.volume = ptr_blkhist->volume;
            //             a.amount = ptr_blkhist->amount;
            //             a.date = ptr_blkhist->date;
            //         });
            //         blkhist_table.erase(*ptr_blkhist);
            //         if (++count>num) return; 
            //     }
            //     // new ordersummary
            //     o_sum.emplace(get_self(), [&]( auto& a ) {
            //         a.market = market;
            //         a.demand.orders = ptr->demand.orders;
            //         a.supply.orders = ptr->supply.orders;
            //         a.demand.total = ptr->demand.total;
            //         a.supply.total = ptr->supply.total;
            //         a.supply.ascurrency = 0;
            //         a.demand.ascurrency = ptr->deals;
            //         a.sell = ptr->sell;
            //         a.pay = ptr->pay;
            //         a.deals = ptr->deals;
            //         a.blocks = ptr->blocks;
            //     });
            //     // borro el viejo
            //     o_summary.erase(*ptr);
            //     if (++count>num) return;
            // }
            // 
            // // check(false, "FIN");



            // modificar history
            // history table2(get_self(), name("tlosdac.tlos").value);
            // auto ptr2 = table2.find(8);
            // table2.modify(*ptr2, same_payer, [&](auto & a){
            //     a.sellfee.amount = 200000000;
            //     a.amount.amount = 100000000000;
            // });



            // cancelar ordenes de copmpra
            // std::vector<uint64_t> vec;
            // vec.push_back(2);
            // aux_cancel_sell_order(name("heydqnjzgene"), name("acorn.telosd"), name("acorn.telosd"), vec);
            // vec.pop_back(); 
            // 
            // vec.push_back(0);
            // vec.push_back(1);
            // vec.push_back(2);
            // vec.push_back(3);
            // vec.push_back(4);
            // vec.push_back(5);
            // vec.push_back(6);
            // vec.push_back(7);
            // aux_cancel_sell_order(name("ghtdghvfkzfo"), name("telosd.tlos"), name("tlos.telosd"), vec);
            // vec.pop_back(); 
            // vec.pop_back(); 
            // vec.pop_back(); 
            // vec.pop_back(); 
            // vec.pop_back(); 
            // vec.pop_back(); 
            // vec.pop_back(); 
            // vec.pop_back(); 
            // vec.push_back(8);
            // aux_cancel_sell_order(name("b1"), name("telosd.tlos"), name("tlos.telosd"), vec);
            // vec.pop_back(); 
            // 

            // restore ordersummary
            // ordersummary o_summary(get_self(), get_self().value);
            // o_summary.emplace(get_self(), [&]( auto& a ) {
            //     a.table = name("acorn.telosd");
            //     a.demand.orders = 0;
            //     a.supply.orders = 3;
            //     a.demand.total = asset(0, symbol(symbol_code("TELOSD"), 8));;
            //     a.supply.total = asset(11332755301, symbol(symbol_code("ACORN"), 8));;
            //     a.supply.ascurrency = 0;
            //     a.demand.ascurrency = 0;
            //     a.sell = symbol_code("ACORN");
            //     a.pay = symbol_code("TELOSD");
            //     a.deals = 0;
            //     a.blocks = 0;
            // });


            // stats statstable(get_self(), symbol_code("CNT").raw());
            // statstable.emplace(get_self(), [&](auto & a){
            //     a.supply = asset(497731940988, symbol(symbol_code("CNT"), 4));
            //     a.max_supply = asset(5000000000000, symbol(symbol_code("CNT"), 4));
            //     a.issuer = name("vapaeetokens");                
            // });













            // // Modificar orden de venta
            // sellorders table0(get_self(), name("tlosdac.tlos").value);
            // auto ptr = table0.find(14);
            // table0.modify(*ptr, same_payer, [&](auto & a){
            //      a.selling.amount = 2612800000000;
            // });

            // modificar depósitos
            // deposits table5(get_self(), name("viterbotelos").value);
            // auto ptr0 = table5.find(symbol_code("TLOSDAC").raw());
            // check(ptr0 != table5.end(), "Le erraste, no existe la entrada");
            // table5.modify(*ptr0, same_payer, [&](auto & a){
            //     a.amount.amount = 110698909424;
            // });

            // modificar earnings
            // earnings table1(get_self(), get_self().value);
            // auto eptr_1 = table1.find(symbol_code("TLOSDAC").raw());
            // table1.modify(*eptr_1, same_payer, [&](auto & a){
            //     a.quantity.amount = 211120000;
            // });

            // modificar history
            // history table2(get_self(), name("tlosdac.tlos").value);
            // auto ptr2 = table2.find(8);
            // table2.modify(*ptr2, same_payer, [&](auto & a){
            //     a.sellfee.amount = 200000000;
            //     a.amount.amount = 100000000000;
            // });

            
            // Borrar token
            // tokens tokens_table(get_self(), get_self().value);
            // auto token_ptr = tokens_table.find(symbol_code("EXAMPLE").raw());
            // tokens_table.erase(token_ptr);
            // stats statstable( _self, symbol_code("EXAMPLE").raw() );
            // auto existing = statstable.find( symbol_code("EXAMPLE").raw() );
            // statstable.erase(*existing);

            // Borrar token de ordersummary
            // ordersummary o_summary(get_self(), get_self().value);
            // auto acorntelosd_ptr = o_summary.find(name("acorn.telosd").value);
            // o_summary.erase(acorntelosd_ptr);
            // auto carbonsumm_ptr = o_summary.find(name("ezar.telosd").value);
            // o_summary.erase(carbonsumm_ptr);

            // for (auto ptr = table0.begin(); ptr != table0.end(); ptr = table0.begin()) {
            //     table0.erase(*ptr);
            //     if (count++ > num) break;
            // }


            // // Borrar ordertables
            // ordertables table(get_self(), get_self().value);
            // for (auto ptr = table.begin(); ptr != table.end(); ptr = table.begin()) {
            //     table.erase(*ptr);
            //     // if (count++ > num) break;
            // }

            // Update ordertables
            // ordertables table1(get_self(), get_self().value);
            // auto ptr = table1.find(name("edna.tlos").value);
            // table1.modify(*ptr, same_payer, [&](auto & a){
            //     a.blocks = 3;
            //     a.deals = 4;
            // });

            // // Borrar ordersummary
            // ordersummary o_summary(get_self(), get_self().value);
            // for (auto ptr = o_summary.begin(); ptr != o_summary.end(); ptr = o_summary.begin()) {
            //     o_summary.erase(*ptr);
            // }

            
            /*
            // Adding ordertables table entries
            ordertables table(get_self(), get_self().value);
            table.emplace(get_self(), [&](auto & a){
                a.table = name("tlos.tlosdac");
                a.sell = symbol_code("TLOS");
                a.pay = symbol_code("TLOSDAC");
                a.total = asset(16521967110, symbol(a.sell, 8));
                a.orders = 5;
                a.deals = 0;
                a.blocks = 0;
            });
            table.emplace(get_self(), [&](auto & a){
                a.table = name("tlosdac.tlos");
                a.sell = symbol_code("TLOSDAC");
                a.pay = symbol_code("TLOS");
                a.total = asset(499844711889, symbol(a.sell, 8));
                a.orders = 9;
                a.deals = 20;
                a.blocks = 16;
            });
            */
            
            
            // ordersum o_sum(get_self(), get_self().value);
            // ordersummary o_summary(get_self(), get_self().value);
            // for (auto ptr = o_sum.begin(); ptr != o_sum.end(); ptr = o_sum.begin()) {
            //     o_summary.emplace(get_self(), [&]( auto& a ) {
            //         a.table = ptr->table;
            //         a.demand.orders = ptr->demand.orders;
            //         a.supply.orders = ptr->supply.orders;
            //         a.demand.total = ptr->demand.total;
            //         a.supply.total = ptr->supply.total;
            //         a.supply.ascurrency = ptr->supply.ascurrency;
            //         a.demand.ascurrency = ptr->demand.ascurrency;
            //         a.sell = ptr->sell;
            //         a.pay = ptr->pay;
            //         a.deals = ptr->deals;
            //         a.blocks = ptr->blocks;
            //     });
            //     o_sum.erase(*ptr);
            // }

            // Modify some token fixed property
            // tokens tokens_table(get_self(), get_self().value);
            // auto carbon_ptr = tokens_table.find(symbol_code("CNT").raw());
            // tokens_table.modify(*carbon_ptr, get_self(), [&]( auto& a ) {
            //     a.owner = name("viterbotelos");
            // });
            
            // // copy from old structure to newone
            // symbol_code telos = symbol_code("TLOS");
            // symbol_code carbon = symbol_code("TLOSD");
            // oldtokens  oldtokens_table (get_self(), get_self().value);
            // tokens tokens_table(get_self(), get_self().value);
            // for (auto ptr = oldtokens_table.begin(); ptr != oldtokens_table.end(); ptr = oldtokens_table.begin()) {
            //     bool currency = false;
            //     if (telos == ptr->symbol) currency = true;
            //     if (carbon == ptr->symbol) currency = true;
            //     tokens_table.emplace(get_self(), [&]( auto& a ) {
            //         a.symbol     = ptr->symbol;
            //         a.precision  = ptr->precision;
            //         a.contract   = ptr->contract;
            //         a.owner      = ptr->owner;
            //         a.title      = ptr->title;
            //         a.website    = ptr->website;
            //         a.brief      = ptr->brief;
            //         a.banner     = ptr->banner;
            //         a.icon       = ptr->icon;
            //         a.iconlg     = ptr->iconlg;
            //         a.date       = ptr->date;
            //         a.tradeable  = ptr->tradeable;
            //         a.banned     = ptr->banned;
            //         a.currency   = currency;
            //         a.data       = ptr->data;
            //     });
            // 
            //     oldtokens_table.erase(ptr);
            // }
            
            // // copy from current token structure to old
            // oldtokens  oldtokens_table (get_self(), get_self().value);
            // tokens tokens_table(get_self(), get_self().value);
            // for (auto ptr = tokens_table.begin(); ptr != tokens_table.end(); ptr = tokens_table.begin()) {
            //     oldtokens_table.emplace(get_self(), [&]( auto& a ) {
            //         a.symbol     = ptr->symbol;
            //         a.precision  = ptr->precision;
            //         a.contract   = ptr->contract;
            //         a.owner      = ptr->owner;
            //         a.title      = ptr->title;
            //         a.website    = ptr->website;
            //         a.brief      = ptr->brief;
            //         a.banner     = ptr->banner;
            //         a.icon       = ptr->icon;
            //         a.iconlg     = ptr->iconlg;
            //         a.date       = ptr->date;
            //         a.tradeable  = ptr->tradeable;
            //         a.banned     = ptr->banned;
            //         a.data       = ptr->data;
            //     });
            // 
            //     tokens_table.erase(ptr);
            // }

            /*
            // copy from old structure to newone
            ordersummary o_summary(get_self(), get_self().value);
            ordersum o_sum(get_self(), get_self().value);
            for (auto ptr = o_summary.begin(); ptr != o_summary.end(); ptr++) {
                o_sum.emplace(get_self(), [&]( auto& a ) {
                    a.table = ptr->table;
                    a.demand.orders = ptr->demand.orders;
                    a.supply.orders = ptr->supply.orders;
                    a.demand.total = ptr->demand.total;
                    a.supply.total = ptr->supply.total;
                    a.supply.ascurrency = 0;
                    a.demand.ascurrency = ptr->deals;
                    a.sell = ptr->sell;
                    a.pay = ptr->pay;
                    a.deals = ptr->deals;
                    a.blocks = ptr->blocks;
                });
            }
            */
            
            /*
            ordersummary o_summary(get_self(), get_self().value);
            ordertables table(get_self(), get_self().value);
            for (auto ptr = table.begin(); ptr != table.end(); ptr++) {
                PRINT(" ------------------ \n");
                
                            
                name scope = ptr->table;
                name can_scope = aux_get_canonical_scope_for_symbols(ptr->pay, ptr->sell);
                bool reverse_scope = can_scope != scope;

                auto orders_itr = o_summary.find(can_scope.value);
                if (orders_itr == o_summary.end()) {
                    o_summary.emplace(get_self(), [&]( auto& a ) {
                        a.table = can_scope;
                        a.demand.orders = 0;
                        a.supply.orders = 0; 
                        if (!reverse_scope) {
                            a.sell = ptr->sell;
                            a.pay = ptr->pay;
                            a.supply.total = asset(0, symbol(a.sell, 8));
                            a.demand.total = asset(0, symbol(a.pay, 8));
                        } else {
                            a.sell = ptr->pay;
                            a.pay = ptr->sell;
                            a.supply.total = asset(0, symbol(a.sell, 8));
                            a.demand.total = asset(0, symbol(a.pay, 8));
                        }
                    });
                    orders_itr = o_summary.find(can_scope.value);
                }

                PRINT("          scope: ", scope.to_string(), "\n");
                PRINT("      can_scope: ", can_scope.to_string(), "\n");
                PRINT("     ptr->total: ", ptr->total.to_string(), "\n");

                o_summary.modify(*orders_itr, get_self(), [&]( auto& a ) {                    
                    if (!reverse_scope) {
                        PRINT(" a.supply.total: ", a.supply.total.to_string(), "\n");
                        a.supply.total += ptr->total;
                        a.supply.orders += ptr->orders;
                        a.deals = ptr->deals; 
                        a.blocks = ptr->blocks;
                    } else {
                        PRINT(" a.demand.total: ", a.demand.total.to_string(), "\n");
                        a.demand.total += ptr->total;
                        a.demand.orders += ptr->orders;
                    }
                });

            }
            */
            

            // Delete fake tokens balance
            // auto sym = quantity.symbol;
            // stats statstable( _self, sym.code().raw() );
            // auto existing = statstable.find( sym.code().raw() );
            // check( existing != statstable.end(), "token with symbol does not exist" );
            // const auto& st = *existing;
            // check( quantity.is_valid(), "invalid quantity" );
            // check( quantity.amount > 0, "must retire positive quantity" );
            // check( quantity.symbol == st.supply.symbol, "symbol precision mismatch" );
            // statstable.modify( st, same_payer, [&]( auto& s ) {
            //     s.supply -= quantity;
            // });
            // accounts acnts( _self, account.value );
            // auto it = acnts.find( quantity.symbol.code().raw() );
            // check( it != acnts.end(), "Balance row already deleted or never existed. Action won't have any effect." );
            // acnts.erase( it );


            // Borrar earnings
            // earnings table1(get_self(), get_self().value);
            // auto eptr_1 = table1.find(symbol_code("AAA").raw());
            // auto eptr_2 = table1.find(symbol_code("BBB").raw());
            // auto eptr_3 = table1.find(symbol_code("CCC").raw());
            // auto eptr_4 = table1.find(symbol_code("DDD").raw());
            // auto eptr_5 = table1.find(symbol_code("EEE").raw());
            // auto eptr_6 = table1.find(symbol_code("FFF").raw());
            // if (eptr_1 != table1.end()) table1.erase(*eptr_1);
            // if (eptr_2 != table1.end()) table1.erase(*eptr_2);
            // if (eptr_3 != table1.end()) table1.erase(*eptr_3);
            // if (eptr_4 != table1.end()) table1.erase(*eptr_4);
            // if (eptr_5 != table1.end()) table1.erase(*eptr_5);
            // if (eptr_6 != table1.end()) table1.erase(*eptr_6);            

            
            // recorro las tablas de historial y actualizo un dato
            // history table2(get_self(), account.value);
            // for (auto ptr = table2.begin(); ptr != table2.end(); ptr++) {
            //     table2.modify(*ptr, get_self(), [&](auto & a){
            //         a.inverse = vapaee::utils::inverse(ptr->price, quantity.symbol);
            //     });
            // }            
            // blockhistory table4(get_self(), account.value);
            // for (auto ptr = table4.begin(); ptr != table4.end(); ptr++) {
            //     table4.modify(*ptr, get_self(), [&](auto & a){
            //         a.inverse = vapaee::utils::inverse(ptr->price, quantity.symbol);
            //         a.amount = vapaee::utils::amount(ptr->price, ptr->volume, quantity.symbol);
            //     });
            // }
            // tablesummary table6(get_self(), account.value);
            // for (auto ptr = table6.begin(); ptr != table6.end(); ptr++) {
            //     table6.modify(*ptr, get_self(), [&](auto & a){
            //         a.inverse = vapaee::utils::inverse(ptr->price, quantity.symbol);
            //         a.amount = vapaee::utils::amount(ptr->price, ptr->volume, quantity.symbol);
            //     });
            // }
            
            
 
            // Borrar history
            // history table2(get_self(), account.value);
            // for (auto ptr = table2.begin(); ptr != table2.end(); ptr = table2.begin()) {
            //     table2.erase(*ptr);
            //     if (count++ > num) break;
            // }
             
            // Borrar blocks
            // blockhistory table3(get_self(), account.value);
            // for (auto ptr = table3.begin(); ptr != table3.end(); ptr = table3.begin()) {
            //     table3.erase(*ptr);
            //     if (count++ > num) break;
            // }
            
            // Borrar blocks
            // tablesummary table4(get_self(), account.value);
            // for (auto ptr = table4.begin(); ptr != table4.end(); ptr = table4.begin()) {
            //     table4.erase(*ptr);
            //     if (count++ > num) break;
            // }

            // Borrar deposits
            // deposits table5(get_self(), account.value);
            // for (auto ptr = table5.begin(); ptr != table5.end(); ptr = table5.begin()) {
            //     table5.erase(*ptr);
            //     if (count++ > num) break;
            // }

            // Borrar earnings
            // earnings table6(get_self(), get_self().value);
            // for (auto ptr = table6.begin(); ptr != table6.end(); ptr = table6.begin()) {
            //     table6.erase(*ptr);
            //     if (count++ > num) break;
            // }

            // Borrar token
            // tokens tokenstable(get_self(), get_self().value);
            // auto itr1 = tokenstable.find(symbol_code("CNT").raw()); 
            // if (itr1 != tokenstable.end()) tokenstable.erase(*itr1);

            // // --
            // accounts accountstable2(get_self(), name("viterbo4test").value);
            // auto itr2 = accountstable2.begin();
            // if (itr2 != accountstable2.end()) accountstable2.erase(*itr2);
            // // --
            // accounts accountstabl3(get_self(), name("vapaeetokens").value);
            // auto itr3 = accountstabl3.begin();
            // if (itr3 != accountstabl3.end()) accountstabl3.erase(*itr3);
            // // --
            // deposits depositstable(get_self(), name("viterbo4test").value);
            // auto itr4 = depositstable.find(symbol_code("CNT").raw()); 
            // depositstable.erase(*itr4);
            // // --
            // stats statstable(get_self(), symbol_code("CNT").raw()); 
            // auto itr5 = statstable.begin();
            // if (itr5 != statstable.end()) statstable.erase(*itr5);
            // // --
            // ordersummary ordersummarytable(get_self(), get_self().value);
            // auto itr6 = ordersummarytable.find(name("cnt.tlos").value); 
            // if (itr6 != ordersummarytable.end()) ordersummarytable.erase(*itr6);
            
            // Borrar de a un token
            // stats statstable(get_self(), quantity.symbol.code().raw()); 
            // auto itr3 = statstable.begin();
            // statstable.erase(*itr3);



//             // poblando la tabla Markets
//             markets markets_table(get_self(), get_self().value);
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("acorn.tlos");
//                 a.commodity = symbol_code("ACORN");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.acorn");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("ACORN");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("acorn.tlosd");
//                 a.commodity = symbol_code("ACORN");
//                 a.currency = symbol_code("TLOSD");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlosd.acorn");
//                 a.commodity = symbol_code("TLOSD");
//                 a.currency = symbol_code("ACORN");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("cnt.tlos");
//                 a.commodity = symbol_code("CNT");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.cnt");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("CNT");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("edna.tlos");
//                 a.commodity = symbol_code("EDNA");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.edna");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("EDNA");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("ezar.tlos");
//                 a.commodity = symbol_code("EZAR");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.ezar");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("EZAR");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("heart.tlos");
//                 a.commodity = symbol_code("HEART");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.heart");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("HEART");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("lol.tlos");
//                 a.commodity = symbol_code("LOL");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.lol");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("LOL");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("olive.tlos");
//                 a.commodity = symbol_code("OLIVE");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.olive");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("OLIVE");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("people.tlos");
//                 a.commodity = symbol_code("PEOPLE");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.people");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("PEOPLE");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("qbe.tlos");
//                 a.commodity = symbol_code("QBE");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.qbe");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("QBE");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("qbe.tlosd");
//                 a.commodity = symbol_code("QBE");
//                 a.currency = symbol_code("TLOSD");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlosd.qbe");
//                 a.commodity = symbol_code("TLOSD");
//                 a.currency = symbol_code("QBE");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("robo.tlos");
//                 a.commodity = symbol_code("ROBO");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.robo");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("ROBO");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("sqrl.tlos");
//                 a.commodity = symbol_code("SQRL");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.sqrl");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("SQRL");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("teach.tlos");
//                 a.commodity = symbol_code("TEACH");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.teach");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("TEACH");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlosd.tlos");
//                 a.commodity = symbol_code("TLOSD");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.tlosd");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("TLOSD");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlosdac.tlos");
//                 a.commodity = symbol_code("TLOSDAC");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.tlosdac");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("TLOSDAC");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("yang.tlos");
//                 a.commodity = symbol_code("TELOSD");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.yang");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("TELOSD");
//             });
// 
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("ynt.tlos");
//                 a.commodity = symbol_code("YNT");
//                 a.currency = symbol_code("TLOS");
//             });
//             markets_table.emplace(get_self(), [&]( auto& a ) {
//                 a.id = market++;
//                 a.name = name("tlos.ynt");
//                 a.commodity = symbol_code("TLOS");
//                 a.currency = symbol_code("YNT");
//             });

            // for (auto ptr = table6.begin(); ptr != table6.end(); ptr = table6.begin()) {
            //     table6.erase(*ptr);
            //     if (count++ > num) break;
            // }

            // ordertables orderstables(get_self(), get_self().value);
            // auto orders_itr = orderstables.find(account.value);
            // 
            // orderstables.modify(*orders_itr, same_payer, [&](auto & a){
            //     a.blocks = num;
            // });
